---
# yamllint disable rule:line-length
###############################################################################
# NVIDIA Hardware Passthrough
###############################################################################
# Create GPU hardware passthrough for a given cluster node.
#
# VM configuration options are listed with correct values once configuration is
# complete.
#
# Args:
#   pve_nvidia_driver: string full or partial driver version to install.
#   pve_os_base: string debian release codename to install backports
#       from, empty string disables.
#   pve_nvidia_passthrough: boolean true to enable GPU passthrough.
#
# Reference:
# * https://pve.proxmox.com/pve-docs/pvesh.1.html
# * https://passbe.com/2020/02/19/gpu-nvidia-passthrough-on-proxmox-lxc-container/
# * https://pve.proxmox.com/pve-docs/pve-admin-guide.html
# * https://wiki.debian.org/NvidiaGraphicsDrivers
#
# - name: 'GPU passthrough | nvidia host | add GPU passthrough repositories'
#   when: pve_nvidia_passthrough
#   block:
#     - name: 'GPU passthrough | nvidia host | add non-free (for GPU passthrough support) repo'
#       ansible.builtin.apt_repository:
#         repo: '{{ item }}'
#         filename: 'os_core'
#         state: 'present'
#         update_cache: true
#       loop:
#         - 'deb http://ftp.us.debian.org/debian {{ pve_os_base }} main contrib non-free'
#         - 'deb http://ftp.us.debian.org/debian {{ pve_os_base }}-updates main contrib non-free'
#         - 'deb http://security.debian.org {{ pve_os_base }}-security main contrib non-free'
#
#     - name: 'GPU passthrough | nvidia host | remove original apt sources'
#       ansible.builtin.apt_repository:
#         repo: '{{ item }}'
#         state: 'absent'
#         update_cache: true
#       loop:
#         - 'deb http://ftp.us.debian.org/debian {{ pve_os_base }} main contrib'
#         - 'deb http://ftp.us.debian.org/debian {{ pve_os_base }}-updates main contrib'
#         - 'deb http://security.debian.org {{ pve_os_base }}-security main contrib'
#
# - name: 'GPU passthrough | nvidia host | install pve headers'
#   ansible.builtin.apt:
#     name: 'pve-headers'
#     state: 'latest'
#     update_cache: true
#
# - name: 'GPU passthrough | nvidia host | detect GPU hardware'
#   ansible.builtin.shell: 'set -o pipefail && lspci | grep -i nvidia'
#   args:
#     executable: '/bin/bash'
#   register: _pve_gpu_detect
#   changed_when: false
#   failed_when: _pve_gpu_detect.rc != 0
#
# - name: 'GPU passthrough | nvidia host | Enable backports for Nvidia GPUs'
#   when: pve_os_base|length > 0
#   block:
#
#     - name: 'GPU passthrough | nvidia host | add debian backports for nvidia support'
#       ansible.builtin.apt_repository:
#         repo: 'deb http://deb.debian.org/debian {{ pve_os_base }}-backports main contrib non-free'
#         filename: 'backports'
#         state: 'present'
#         update_cache: true
#
#     - name: 'GPU passthrough | nvidia host | add debian source backports for nvidia support'
#       ansible.builtin.apt_repository:
#         repo: 'deb http://deb.debian.org/debian {{ pve_os_base }}-backports main contrib non-free'
#         filename: 'backports_source'
#         state: 'present'
#         update_cache: true
#
#     - name: 'GPU passthrough | nvidia host | install nvidia drivers from backports'
#       ansible.builtin.apt:
#         name:
#           - 'nvidia-driver={{ pve_nvidia_driver }}*'
#           - 'nvidia-smi={{ pve_nvidia_driver }}*'
#         default_release: '{{ pve_os_base }}-backports'
#         update_cache: true
#         state: 'present'
#       register: _pve_gpu_host_driver
#
#
# - name: 'GPU passthrough | nvidia host | install nvidia drivers'
#   when: pve_os_base|length == 0
#   ansible.builtin.apt:
#     name:
#       - 'nvidia-driver={{ pve_nvidia_driver }}*'
#       - 'nvidia-smi={{ pve_nvidia_driver }}*'
#     update_cache: true
#     state: 'present'
#   register: _pve_gpu_host_driver
#
# - name: 'GPU passthrough | nvidia host | enable nvidia drivers on boot'
#   ansible.builtin.copy:
#     src: 'etc/modules-load.d/nvidia.conf'
#     dest: '/etc/modules-load.d/nvidia.conf'
#     owner: 'root'
#     group: 'root'
#     mode: '0644'
#     force: true
#   register: _pve_gpu_host_modules
#
# - name: 'GPU passthrough | nvidia host | add nvidia udev rules to populate /dev'
#   ansible.builtin.copy:
#     src: 'etc/udev/rules.d/70-nvidia.rules'
#     dest: '/etc/udev/rules.d/70-nvidia.rules'
#     owner: 'root'
#     group: 'root'
#     mode: '0644'
#     force: true
#   register: _pve_gpu_host_udev
#
# - name: 'GPU passthrough | nvidia host | rebooting to enable host-passthrough' # noqa no-handler execute immediately
#   when: >
#     _pve_gpu_host_driver.changed or
#     _pve_gpu_host_modules.changed or
#     _pve_gpu_host_udev.changed
#   ansible.builtin.reboot:
#     reboot_timeout: 3600
#
# - name: 'GPU passthrough | nvidia host | verify nvidia drivers are loaded'
#   ansible.builtin.command: 'nvidia-smi'
#   register: _pve_gpu_host_validate
#   changed_when: false
#   failed_when: _pve_gpu_host_validate.rc != 0
#
# # Get the device IDs from /dev/dri/* and /dev/nvidia* (5th column).
# # https://passbe.com/2020/02/19/gpu-nvidia-passthrough-on-proxmox-lxc-container/
# - name: 'GPU passthrough | nvidia host | determine passthrough device IDs'
#   ansible.builtin.shell: |
#     set -o pipefail && find /dev/dri/ /dev/nvidia* -type c | xargs ls -lA | awk '{ print $5 }' | sed '/^$/d' | sed 's/,*$//g' | sort | uniq | awk '{ print "lxc.cgroup2.devices.allow: c "$1":* rwm" }'
#   args:
#     executable: '/bin/bash'
#   register: _pve_gpu_host_dev
#   changed_when: false
#
# - name: 'GPU passthrough | nvidia host | determine passthrough character devices'
#   ansible.builtin.shell: "set -o pipefail && find /dev/nvidia* -type c ! -name nvidia-cap* | awk '{ print \"lxc.mount.entry: \"$1\" \"$1\" none bind,optional,create=file\" }'"
#   args:
#     executable: '/bin/bash'
#   register: _pve_gpu_host_cdev
#   changed_when: false
#
# - name: 'GPU passthrough | nvidia host | NVIDIA GPU DEVICE ID PASSTHRU (add to container)'
#   ansible.builtin.debug:
#     msg: |
#       Autogenerated LXC config suggestion:
#
#       {{ _pve_gpu_host_dev.stdout }}
#       {{ _pve_gpu_host_cdev.stdout }}
#       lxc.mount.entry: /dev/dri dev/dri none bind,optional,create=dir
#       lxc.mount.entry: /dev/nvidia-caps /dev/nvidia-caps none bind,optional,create=dir
